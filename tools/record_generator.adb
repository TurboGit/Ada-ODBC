--
--  Author : Gautier de Montmollin
--
--  Small utility to generate a record type corresponding
--  to a database table's model.
--
--  Usage: Record_generator ODBC_Source Table_Name

with Ada.Command_Line;
with Ada.Text_IO;
with Ada.Strings.Fixed;
with Ada.Exceptions;

with Databases.Select_Query;

procedure Record_Generator is

   use Ada;
   use Ada.Command_Line;
   use Ada.Strings.Fixed;
   use Ada.Exceptions;

   package SQL renames Databases.Select_Query;

   Clients : Databases.Database;
   Query   : SQL.Select_Datas;

   --------------
   -- Generate --
   --------------

   procedure Generate is

      Driver : constant String := Argument (1);
      Table  : constant String := Argument (2);

      -----------
      -- Blurb --
      -----------

      function Blurb return String is
      begin
         return
           "-- Generated by Record_generator, for data source '" &
         Driver & "' and table '" & Table & "'.";
      end;

      ------------
      -- Adaize --
      ------------

      function Adaize (S : String) return String is
         T    : String := S;
         J    : Integer;
         Last : Character := 'x';
      begin
         J := T'First;

         for I in S'Range loop
            case S (I) is
               when ' ' =>
                  T (J) := '_';
                  if Last = '_' then
                     J := J - 1; -- avoid double underscores
                  end if;

               when '(' | ')' | '-' =>
                  J := J - 1;

               when others =>
                  T (J) := S (I);
            end case;

            Last := T (J);
            J := J + 1;
         end loop;

         return T (T'First .. J - 1);
      end Adaize;

      Found : Boolean;
      Max   : Natural := 0;

   begin
      Databases.Connect (Clients, Driver, "", "");
      SQL.Execute (Clients, "select * from " & Table, Query);

      SQL.Fetch (Query, Found);

      if Found then
         Text_IO.Put_Line (Blurb);
         Text_IO.Put_Line ("type " & Table & " is record");

         for Column in 1 .. SQL.Number_Of_Columns (Query) loop
            Max := Natural'Max
              (Max, Adaize (SQL.Get_Name (Query, Column))'Length);
         end loop;

         for Column in 1 .. SQL.Number_Of_Columns (Query) loop
            Text_IO.Put_Line
              ("   " &
               Adaize (SQL.Get_Name (Query, Column)) &
               (Max - Adaize (SQL.Get_Name (Query, Column))'Length) * ' ' &
               ": " &
               SQL.Get_Model_Name (Query, Column) & "; -- " &
               Integer'Image (Column));
         end loop;

         Text_IO.Put_Line ("end record; -- " & Table);
      end if;

      Databases.Close (Clients);

   exception
      when E : others =>
         Text_IO.Put_Line
           (Text_IO.Standard_Error,
            "Problem with ODBC :-( ... : " & Exception_Message (E));
         Databases.Close (Clients);
   end Generate;

begin
   Generate;
exception
   when Constraint_Error =>
      Text_IO.Put_Line
        (Text_IO.Standard_Error,
	 "Usage: Record_generator ODBC_Source Table_Name");
end Record_Generator;
